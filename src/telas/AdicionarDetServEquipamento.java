package telas;

import atributos.DetServicoEquipamento;
import atributos.Equipamento;
import funcoes.Conexao;
import funcoes.DetServicoEquipamentoDAO;
import funcoes.EquipamentoDAO;
import funcoes.TabelaZebrada;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;


public class AdicionarDetServEquipamento extends javax.swing.JFrame {

    private PreparedStatement pst;
    
    private int idServico;
    private DetalharServico telaDatalharServico;
    
    private int codEquipamento;
    private int codDetEquipamento;
    private int codFabricanteEqui;
    private int codModeloEqui;
    
    private String modeloEqui;
    private String fabricanteEqui;
    private String equipamento;
    
    /**
     * Creates new form AdicionarDetServEquipamento
     */
    
    public AdicionarDetServEquipamento() {
        initComponents();
    }
    
    public AdicionarDetServEquipamento(int idServ, DetalharServico telaDetalharServ) {
        this.idServico = idServ;
        this.telaDatalharServico = telaDetalharServ;
        initComponents();
        ocultaTabela();
        carregarComboEquipamento();
        
        uJComboBoxEquipamento.getEditor().getEditorComponent().addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                if (codEquipamento == 0 && uJComboBoxEquipamento.getSelectedIndex() != 0) {
                    JOptionPane.showMessageDialog(null, "Esse registro n√£o encontra-se cadastrado na base de dados.");
                    uJComboBoxEquipamento.getEditor().getEditorComponent().requestFocus();
                }
            }
        });
        uJComboBoxEquipamento.setAutocompletar(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jBtnRemoveEquipamento = new javax.swing.JButton();
        jBtbIncluirEquipamento = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEquipamento = new javax.swing.JTable();
        jLabel37 = new javax.swing.JLabel();
        jComboBoxModeloEquip = new javax.swing.JComboBox();
        jLabel38 = new javax.swing.JLabel();
        jComboBoxFabricanteEquip = new javax.swing.JComboBox();
        jBtnInserirDetServEquipamento = new javax.swing.JButton();
        uJComboBoxEquipamento = new componentes.UJComboBox();
        jLabel2 = new javax.swing.JLabel();
        jBtnCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(254, 254, 233));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Equipamento:");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        jBtnRemoveEquipamento.setText("Remover");
        jBtnRemoveEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRemoveEquipamentoActionPerformed(evt);
            }
        });
        jPanel4.add(jBtnRemoveEquipamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 430, -1, -1));

        jBtbIncluirEquipamento.setText("IncluirEquipamento");
        jBtbIncluirEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtbIncluirEquipamentoActionPerformed(evt);
            }
        });
        jPanel4.add(jBtbIncluirEquipamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 260, -1, -1));

        jTableEquipamento.setBackground(new java.awt.Color(254, 254, 233));
        jTableEquipamento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Id modelo", "Id fabricante", "Equipamento", "Modelo", "Fabricante"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableEquipamento.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTableEquipamento);

        jPanel4.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 620, 130));

        jLabel37.setText("Modelo:");
        jPanel4.add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, -1, -1));

        jComboBoxModeloEquip.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione o Modelo" }));
        jComboBoxModeloEquip.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxModeloEquipItemStateChanged(evt);
            }
        });
        jPanel4.add(jComboBoxModeloEquip, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 180, 320, -1));

        jLabel38.setText("Fabricante:");
        jPanel4.add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        jComboBoxFabricanteEquip.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione o Fabricante" }));
        jComboBoxFabricanteEquip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFabricanteEquipActionPerformed(evt);
            }
        });
        jPanel4.add(jComboBoxFabricanteEquip, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, 320, -1));

        jBtnInserirDetServEquipamento.setText("Salvar");
        jBtnInserirDetServEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnInserirDetServEquipamentoActionPerformed(evt);
            }
        });
        jPanel4.add(jBtnInserirDetServEquipamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 490, -1, -1));

        uJComboBoxEquipamento.setEditable(true);
        uJComboBoxEquipamento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                uJComboBoxEquipamentoItemStateChanged(evt);
            }
        });
        uJComboBoxEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uJComboBoxEquipamentoActionPerformed(evt);
            }
        });
        jPanel4.add(uJComboBoxEquipamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 320, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/leiaute/img2.png"))); // NOI18N
        jPanel4.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 680, -1));

        jBtnCancelar.setText("Cancelar");
        jBtnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelarActionPerformed(evt);
            }
        });
        jPanel4.add(jBtnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnRemoveEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRemoveEquipamentoActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) jTableEquipamento.getModel();
        int linha = jTableEquipamento.getSelectedRow();

        if(linha != -1) {
            dtm.removeRow(linha);
        }
    }//GEN-LAST:event_jBtnRemoveEquipamentoActionPerformed

    private void jBtbIncluirEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtbIncluirEquipamentoActionPerformed
        TabelaEquipamento();
    }//GEN-LAST:event_jBtbIncluirEquipamentoActionPerformed

    private void jComboBoxModeloEquipItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxModeloEquipItemStateChanged
        jComboBoxFabricanteEquip.removeAllItems();
        idModeloEquiComboBox();
        populaComboBoxFabricanteEquip();
        if (jComboBoxModeloEquip.getSelectedItem() != null) {
            modeloEqui = jComboBoxModeloEquip.getSelectedItem().toString();
        }
    }//GEN-LAST:event_jComboBoxModeloEquipItemStateChanged

    private void jComboBoxFabricanteEquipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFabricanteEquipActionPerformed
        idFabricanteEquiComboBox();
        if (jComboBoxFabricanteEquip.getSelectedItem() != null) {
            fabricanteEqui = jComboBoxFabricanteEquip.getSelectedItem().toString();
        }
    }//GEN-LAST:event_jComboBoxFabricanteEquipActionPerformed

    private void jBtnInserirDetServEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnInserirDetServEquipamentoActionPerformed
        
        DetServicoEquipamento dtServEqui = new DetServicoEquipamento();
        
        for(int j=0; j < jTableEquipamento.getRowCount(); j++) {

            dtServEqui.setCodServico(idServico);
            dtServEqui.setCodDetEquipamento(Integer.parseInt(jTableEquipamento.getValueAt(j, 0).toString()));

            DetServicoEquipamentoDAO.CadDetServEquipamento(dtServEqui);
        }
        
        telaDatalharServico.TabelaEquipamento("SELECT * FROM vw_detservequipamento where idservico = " + idServico +";");
        verificaPagina();
        this.dispose();
    }//GEN-LAST:event_jBtnInserirDetServEquipamentoActionPerformed

    private void uJComboBoxEquipamentoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_uJComboBoxEquipamentoItemStateChanged

        jComboBoxModeloEquip.removeAllItems();
        jComboBoxFabricanteEquip.removeAllItems();
        codModeloEqui = 0;
        modeloEqui = null;
        codFabricanteEqui = 0;
        fabricanteEqui = null;
        codEquipamento = 0;
        idEquipamentoComboBox();
        populaComboBoxModeloEqui();
        equipamento = uJComboBoxEquipamento.getSelectedItem().toString();
    }//GEN-LAST:event_uJComboBoxEquipamentoItemStateChanged

    private void uJComboBoxEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uJComboBoxEquipamentoActionPerformed
        idEquipamentoComboBox();
        if (uJComboBoxEquipamento.getSelectedItem() != null) {
            equipamento = uJComboBoxEquipamento.getSelectedItem().toString();
        }
    }//GEN-LAST:event_uJComboBoxEquipamentoActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        verificaPagina();
    }//GEN-LAST:event_formWindowClosed

    private void jBtnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelarActionPerformed
        this.dispose();
        verificaPagina();
    }//GEN-LAST:event_jBtnCancelarActionPerformed

    public void TabelaEquipamento() {
        
        codDetEquipamento = EquipamentoDAO.CodigoDetEquipamento(codEquipamento, codModeloEqui, codFabricanteEqui);
        
        try { 
            
            DefaultTableModel dtm = (DefaultTableModel) jTableEquipamento.getModel();
                   
                dtm.addRow(new Object[] {codDetEquipamento,
                                         codModeloEqui,
                                         codFabricanteEqui, 
                                         equipamento, 
                                         modeloEqui, 
                                         fabricanteEqui});
                TableCellRenderer renderer = new TabelaZebrada();
                jTableEquipamento.setDefaultRenderer(Object.class, renderer);
                                                     
        } catch (Exception erro) {
            Logger.getLogger(CadastrarCliente.class.getName()).log(Level.SEVERE, null, erro);
        }          
    }
    
    private void carregarComboEquipamento() {

        //   uJComboBoxEquipamento.clear();
        ArrayList<Equipamento> equipamentos = new ArrayList<Equipamento>();
        equipamentos = EquipamentoDAO.ListarEquipamentos();

        uJComboBoxEquipamento.addItem("Selecione o equipamento");
        for (Equipamento equi : equipamentos) {
            uJComboBoxEquipamento.addItem(equi.getEquipamento(), equi);
        }
    }
    
    private void idEquipamentoComboBox() {
        
        Connection conexao = Conexao.getConnection();
        ResultSet rs;
        String sql = "select * from tabequipamento where equipamento = '" + uJComboBoxEquipamento.getSelectedItem()+ "';";
        
        try{
            pst = conexao.prepareStatement(sql);
            rs = pst.executeQuery();
            
            while(rs.next()) {
                codEquipamento = (rs.getInt("idEquipamento"));
            }
            
        }catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
       
    private void populaComboBoxModeloEqui() {
        
        Connection conexao = Conexao.getConnection();
        ResultSet rs;
        String sql = "select modelo " +
                                    " from tabdetequipamento inner join " +
                                    " tabequipamento inner join " +
                                    " tabmodelo on tabmodelo_idtabModelo = idtabModelo and " +
                                    " tabequipamento_idEquipamento = idEquipamento"
                                +   " where idEquipamento = " + codEquipamento + " group by modelo;";
        
        try{
            pst = conexao.prepareStatement(sql);
            rs = pst.executeQuery();
            
            while(rs.next()) {
                jComboBoxModeloEquip.addItem(rs.getString("modelo"));
            }
            
        }catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    private void idModeloEquiComboBox() {
        
        Connection conexao = Conexao.getConnection();
        ResultSet rs;
        String sql = "select * from tabmodelo where modelo = '" + jComboBoxModeloEquip.getSelectedItem()+ "';";
        
        try{
            pst = conexao.prepareStatement(sql);
            rs = pst.executeQuery();
            
            while(rs.next()) {
                codModeloEqui = (rs.getInt("idtabModelo"));
            }
            
        }catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    
    private void populaComboBoxFabricanteEquip() {
        
        Connection conexao = Conexao.getConnection();
        ResultSet rs;
        String sql = "SELECT * FROM vw_combofabricanteequipamento "
                   + " WHERE idEquipamento = " + codEquipamento 
                   + " AND tabmodelo_idtabModelo = " + codModeloEqui + " group by fabricante;";
        
        try{
            pst = conexao.prepareStatement(sql);
            rs = pst.executeQuery();
            
            while(rs.next()) {
                jComboBoxFabricanteEquip.addItem(rs.getString("fabricante"));
            }
            
        }catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    private void idFabricanteEquiComboBox() {
        
        Connection conexao = Conexao.getConnection();
        ResultSet rs;
        String sql = "select * from tabfabricante where fabricante = '" + jComboBoxFabricanteEquip.getSelectedItem()+ "';";
        
        try{
            pst = conexao.prepareStatement(sql);
            rs = pst.executeQuery();
            
            while(rs.next()) {
                codFabricanteEqui = (rs.getInt("idtabFabricante"));
            }
            
        }catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void ocultaTabela() {
        jTableEquipamento.getColumnModel().getColumn(0).setMaxWidth(0);
        jTableEquipamento.getColumnModel().getColumn(0).setMinWidth(0);
        jTableEquipamento.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(0);
        jTableEquipamento.getTableHeader().getColumnModel().getColumn(0).setMinWidth(0);
        
        jTableEquipamento.getColumnModel().getColumn(1).setMaxWidth(0);
        jTableEquipamento.getColumnModel().getColumn(1).setMinWidth(0);
        jTableEquipamento.getTableHeader().getColumnModel().getColumn(1).setMaxWidth(0);
        jTableEquipamento.getTableHeader().getColumnModel().getColumn(1).setMinWidth(0);
        
        jTableEquipamento.getColumnModel().getColumn(2).setMaxWidth(0);
        jTableEquipamento.getColumnModel().getColumn(2).setMinWidth(0);
        jTableEquipamento.getTableHeader().getColumnModel().getColumn(2).setMaxWidth(0);
        jTableEquipamento.getTableHeader().getColumnModel().getColumn(2).setMinWidth(0);
    }
    
    private void verificaPagina() {

        if ((this.telaDatalharServico != null)) {
            this.telaDatalharServico.setEnabled(true);
            this.telaDatalharServico.toFront();
            
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtbIncluirEquipamento;
    private javax.swing.JButton jBtnCancelar;
    private javax.swing.JButton jBtnInserirDetServEquipamento;
    private javax.swing.JButton jBtnRemoveEquipamento;
    private javax.swing.JComboBox jComboBoxFabricanteEquip;
    private javax.swing.JComboBox jComboBoxModeloEquip;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableEquipamento;
    private componentes.UJComboBox uJComboBoxEquipamento;
    // End of variables declaration//GEN-END:variables
}
